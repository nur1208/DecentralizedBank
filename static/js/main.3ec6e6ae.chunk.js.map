{"version":3,"sources":["Web3Client.js","dbank.png","App.jsx","reportWebVitals.js","index.js"],"names":["selectedAccount","init","a","provider","window","ethereum","console","log","request","method","accounts","on","web3","Web3","eth","net","getId","networkId","address","NFTBuildContract","networks","Contract","abi","APP_STATUS","App","useState","account","setAccount","balance","setBalance","setWeb3","dBank","setDBank","token","setToken","setDBankAddress","depositAmount","setDepositAmount","DBCBalance","setDBCBalance","status","setStatus","handlerCallingBlackChain","functionName","sendObject","undefined","methods","send","getBalance","localBalance","balanceOf","call","localDBCBalance","deposit","amount","from","value","toString","withdraw","loadBlockchainData","dispatch","web3Local","netId","getAccounts","alert","dBankLocalAddress","DBank","tokenLocal","Token","dBankLocal","decimals","isDeposited","useEffect","className","href","target","rel","style","display","justifyContent","alignItems","src","dbank","alt","height","marginLeft","flexDirection","gap","Spinner","animation","role","Number","toFixed","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","e","preventDefault","amountLocal","step","type","placeholder","onChange","required","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ec6e6ae.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n// import NFTBuildContract from \"./build/contracts/NFT.json\";\r\nimport NFTBuildContract from \"./abis/NFT.json\";\r\n\r\nlet selectedAccount;\r\nlet nftContract;\r\nexport const init = async () => {\r\n  // const providerUrl =\r\n  //   process.env.PROVIDER_URL || \"http://127.0.0.1:8545\";\r\n  let provider = window.ethereum;\r\n\r\n  console.log({ provider });\r\n  if (typeof provider !== \"undefined\") {\r\n    // MateMask installed\r\n\r\n    try {\r\n      const accounts = await provider.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      selectedAccount = accounts[0];\r\n\r\n      console.log(`selected account is ${selectedAccount}`);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      selectedAccount = accounts[0];\r\n\r\n      console.log(\r\n        `selected account changed to ${selectedAccount}`\r\n      );\r\n    });\r\n  }\r\n  const web3 = new Web3(provider);\r\n  const networkId = await web3.eth.net.getId();\r\n\r\n  const address = NFTBuildContract.networks[networkId].address;\r\n\r\n  nftContract = new web3.eth.Contract(\r\n    NFTBuildContract.abi,\r\n    address\r\n  );\r\n};\r\n\r\nexport const mintToken = () => {\r\n  return nftContract.methods\r\n    .mint(selectedAccount)\r\n    .send({ from: selectedAccount });\r\n};\r\n","export default __webpack_public_path__ + \"static/media/dbank.49ac29b5.png\";","import { useEffect, useState } from \"react\";\r\nimport { Tabs, Tab, Spinner } from \"react-bootstrap\";\r\nimport { init, mintToken } from \"./Web3Client\";\r\nimport Token from \"./abis/Token.json\";\r\nimport DBank from \"./abis/DBank.json\";\r\n\r\nimport Web3 from \"web3\";\r\nimport dbank from \"./dbank.png\";\r\n\r\nconst APP_STATUS = {\r\n  RUNNING: \"RUNNING\",\r\n  CONTRACTS_LOADING: \"CONTRACTS_LOADING\",\r\n  CONTRACTS_SUCCESS: \"CONTRACTS_SUCCESS\",\r\n  CONTRACTS_FAILED: \"CONTRACTS_FAILED\",\r\n  ACTION_LOADING: \"ACTION_LOADING\",\r\n  ACTION_SUCCESS: \"ACTION_SUCCESS\",\r\n  ACTION_FAILED: \"ACTION_FAILED\",\r\n};\r\n\r\nfunction App() {\r\n  const [account, setAccount] = useState(null);\r\n  const [balance, setBalance] = useState(0);\r\n  const [web3, setWeb3] = useState(null);\r\n  const [dBank, setDBank] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [dBankAddress, setDBankAddress] = useState(\"\");\r\n  const [depositAmount, setDepositAmount] = useState(\"\");\r\n  const [DBCBalance, setDBCBalance] = useState(0);\r\n  const [status, setStatus] = useState(\r\n    APP_STATUS.CONTRACTS_LOADING\r\n  );\r\n  const handlerCallingBlackChain = async (\r\n    functionName,\r\n    sendObject\r\n  ) => {\r\n    console.log(\"handlerCallingBlackChain called\");\r\n\r\n    if (dBank !== null && dBank !== undefined) {\r\n      try {\r\n        setStatus(APP_STATUS.ACTION_LOADING);\r\n\r\n        console.log(dBank.methods);\r\n        console.log(dBank.methods[functionName]);\r\n        // await mintToken();\r\n        await dBank.methods[functionName]().send(sendObject);\r\n        const localBalance = await web3.eth.getBalance(account);\r\n        const localDBCBalance = await token.methods\r\n          .balanceOf(account)\r\n          .call();\r\n        setDBCBalance(localDBCBalance);\r\n        setStatus(APP_STATUS.ACTION_SUCCESS);\r\n        setBalance(localBalance);\r\n      } catch (error) {\r\n        console.log(`Error, ${functionName}: `, error);\r\n        setStatus(APP_STATUS.ACTION_FAILED);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deposit = async (amount) => {\r\n    console.log(\"deposit called\");\r\n    await handlerCallingBlackChain(\"deposit\", {\r\n      from: account,\r\n      value: amount.toString(),\r\n    });\r\n  };\r\n\r\n  const withdraw = async (amount) => {\r\n    console.log(\"withdraw called\");\r\n\r\n    await handlerCallingBlackChain(\"withdraw\", {\r\n      from: account,\r\n    });\r\n  };\r\n\r\n  const loadBlockchainData = async (dispatch) => {\r\n    console.log(\"loadBlockchainData called\");\r\n    if (typeof window.ethereum !== \"undefined\") {\r\n      const web3Local = new Web3(window.ethereum);\r\n      const netId = await web3Local.eth.net.getId();\r\n      const selectedAccount = (\r\n        await web3Local.eth.getAccounts()\r\n      )[0];\r\n\r\n      console.log({ account: selectedAccount });\r\n      //load balance\r\n      if (selectedAccount !== \"undefined\") {\r\n        const localBalance = await web3Local.eth.getBalance(\r\n          selectedAccount\r\n        );\r\n\r\n        setAccount(selectedAccount);\r\n        setBalance(localBalance);\r\n        setWeb3(web3Local);\r\n      } else {\r\n        window.alert(\"Please login with MetaMask\");\r\n      }\r\n\r\n      //load contracts\r\n\r\n      try {\r\n        const dBankLocalAddress = DBank.networks[netId].address;\r\n        const tokenLocal = new web3Local.eth.Contract(\r\n          Token.abi,\r\n          Token.networks[netId].address\r\n        );\r\n\r\n        const dBankLocal = new web3Local.eth.Contract(\r\n          DBank.abi,\r\n          dBankLocalAddress\r\n        );\r\n        const localDBCBalance = await tokenLocal.methods\r\n          .balanceOf(selectedAccount)\r\n          .call();\r\n        console.log(await tokenLocal.methods.decimals().call());\r\n        console.log(\r\n          await dBankLocal.methods\r\n            .isDeposited(selectedAccount)\r\n            .call()\r\n        );\r\n\r\n        setDBCBalance(localDBCBalance);\r\n        setToken(tokenLocal);\r\n        setDBank(dBankLocal);\r\n        setDBankAddress(dBankLocalAddress);\r\n      } catch (error) {\r\n        console.log(\"Error\", error);\r\n        console.log(error);\r\n\r\n        window.alert(\r\n          \"Contracts not deployed to the current network\"\r\n        );\r\n      }\r\n    } else {\r\n      window.alert(\"Please install MetaMask\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      await init();\r\n\r\n      await loadBlockchainData();\r\n      setStatus(APP_STATUS.RUNNING);\r\n      // await deposit(10 ** 16);\r\n    })();\r\n  }, []);\r\n  // const [balance, setBalance] = useState(0);\r\n\r\n  // const mint = () => {};\r\n  return (\r\n    // <div className=\"App\">\r\n    //   app {balance}{\" \"}\r\n    //   <button onClick={async () => await deposit(10 ** 16)}>\r\n    //     deposit\r\n    //   </button>{\" \"}\r\n    // </div>\r\n    <div className=\"text-monospace\">\r\n      <nav className=\"navbar navbar-dark  fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.dappuniversity.com/bootcamp\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <img\r\n              src={dbank}\r\n              className=\"App-logo\"\r\n              alt=\"logo\"\r\n              height=\"32\"\r\n            />\r\n            <b style={{ marginLeft: \"10px\" }}>d₿ank</b>\r\n          </div>\r\n        </a>\r\n      </nav>\r\n      {status === APP_STATUS.CONTRACTS_LOADING ? (\r\n        <div\r\n          // className=\"flex-md-nowrap\"\r\n          style={{\r\n            height: \"75vh\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            flexDirection: \"column\",\r\n            gap: \"1rem\",\r\n          }}\r\n        >\r\n          <h2>loading smart contracts</h2>\r\n\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            {/* <span className=\"visually-hidden\">Loading...</span> */}\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <div\r\n          className=\"container-fluid pt-3 mt-5 text-center\"\r\n          style={{ height: \"75vh\" }}\r\n        >\r\n          <h1>Welcome to d₿ank</h1>\r\n          <h2>{account}</h2>\r\n          <div\r\n            className=\"d-flex pl-4 justify-content-center align-items-center\"\r\n            style={{ gap: \"5rem\" }}\r\n          >\r\n            <h4>\r\n              {(Number(balance) / 10 ** 18).toFixed(4)} eth\r\n            </h4>\r\n            <h4>\r\n              {(Number(DBCBalance) / 10 ** 18).toFixed(10)} DBC\r\n            </h4>\r\n          </div>\r\n          <div className=\"row\">\r\n            <main\r\n              role=\"main\"\r\n              className=\"col-lg-12 d-flex text-center\"\r\n            >\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <Tabs\r\n                  defaultActiveKey=\"profile\"\r\n                  id=\"uncontrolled-tab-example\"\r\n                >\r\n                  <Tab eventKey=\"deposit\" title=\"Deposit\">\r\n                    <div>\r\n                      <br></br>\r\n                      How much do you want to deposit?\r\n                      <br></br>\r\n                      (min. amount is 0.01 ETH)\r\n                      <br></br>\r\n                      (1 deposit is possible at the time)\r\n                      <br></br>\r\n                      <form\r\n                        onSubmit={(e) => {\r\n                          e.preventDefault();\r\n                          let amountLocal = depositAmount;\r\n                          amountLocal = amountLocal * 10 ** 18; //convert to wei\r\n                          deposit(amountLocal);\r\n                        }}\r\n                      >\r\n                        <div className=\"form-group mr-sm-2\">\r\n                          <br></br>\r\n                          <input\r\n                            id=\"depositAmount\"\r\n                            step=\"0.01\"\r\n                            type=\"number\"\r\n                            placeholder=\"amount...\"\r\n                            onChange={(e) =>\r\n                              setDepositAmount(e.target.value)\r\n                            }\r\n                            required\r\n                          />\r\n                        </div>\r\n                        <button\r\n                          type=\"submit\"\r\n                          className=\"btn btn-primary\"\r\n                        >\r\n                          DEPOSIT\r\n                        </button>\r\n                      </form>\r\n                    </div>\r\n                  </Tab>\r\n                  <Tab eventKey=\"withdraw\" title=\"Withdraw\">\r\n                    <br></br>\r\n                    Do you want to withdraw + take interest?\r\n                    <br></br>\r\n                    <br></br>\r\n                    <div>\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={(e) => withdraw(e)}\r\n                      >\r\n                        WITHDRAW\r\n                      </button>\r\n                    </div>\r\n                  </Tab>\r\n                  {/* <Tab eventKey=\"borrow\" title=\"Borrow\">\r\n                  <div>\r\n                    <br></br>\r\n                    Do you want to borrow tokens?\r\n                    <br></br>\r\n                    (You'll get 50% of collateral, in Tokens)\r\n                    <br></br>\r\n                    Type collateral amount (in ETH)\r\n                    <br></br>\r\n                    <br></br>\r\n                    <form\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                        let amount = this.borrowAmount.value;\r\n                        amount = amount * 10 ** 18; //convert to wei\r\n                        this.borrow(amount);\r\n                      }}\r\n                    >\r\n                      <div className=\"form-group mr-sm-2\">\r\n                        <input\r\n                          id=\"borrowAmount\"\r\n                          step=\"0.01\"\r\n                          type=\"number\"\r\n                          ref={(input) => {\r\n                            this.borrowAmount = input;\r\n                          }}\r\n                          className=\"form-control form-control-md\"\r\n                          placeholder=\"amount...\"\r\n                          required\r\n                        />\r\n                      </div>\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary\"\r\n                      >\r\n                        BORROW\r\n                      </button>\r\n                    </form>\r\n                  </div>\r\n                </Tab>\r\n                <Tab eventKey=\"payOff\" title=\"Payoff\">\r\n                  <div>\r\n                    <br></br>\r\n                    Do you want to payoff the loan?\r\n                    <br></br>\r\n                    (You'll receive your collateral - fee)\r\n                    <br></br>\r\n                    <br></br>\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-primary\"\r\n                      onClick={(e) => this.payOff(e)}\r\n                    >\r\n                      PAYOFF\r\n                    </button>\r\n                  </div>\r\n                </Tab> */}\r\n                </Tabs>\r\n              </div>\r\n            </main>\r\n          </div>\r\n          {status === APP_STATUS.ACTION_LOADING && (\r\n            <div\r\n              className=\"mt-2\"\r\n              style={{\r\n                // height: \"75vh\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                // flexDirection: \"column\",\r\n                gap: \"1rem\",\r\n              }}\r\n            >\r\n              <Spinner animation=\"border\" role=\"status\">\r\n                {/* <span className=\"visually-hidden\">Loading...</span> */}\r\n              </Spinner>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      <footer className=\"d-flex flex-wrap justify-content-center align-items-center py-3 my-4 border-top\">\r\n        <div>\r\n          <span>Developer: NUR</span>\r\n          <span className=\" ml-2\">\r\n            email: medo0o6665@gmail.com\r\n          </span>\r\n          <span className=\" ml-2\">github: nur1208</span>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}